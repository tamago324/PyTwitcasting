# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys
import glob
import re

# sys.path.insert(0, os.path.abspath('.'))
sys.path.insert(0, os.path.abspath('..'))


# -- Project information -----------------------------------------------------

project = 'PyTwitcasting'
copyright = '2018, tamago324'
author = 'tamago324'

# The short X.Y version
version = ''
# The full version, including alpha/beta/rc tags
release = ''


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.viewcode',
    'sphinx.ext.intersphinx',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'ja'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_rtd_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'PyTwitcastingdoc'


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'PyTwitcasting.tex', 'PyTwitcasting Documentation',
     'tamago324', 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'pytwitcasting', 'PyTwitcasting Documentation',
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'PyTwitcasting', 'PyTwitcasting Documentation',
     author, 'PyTwitcasting', 'One line description of project.',
     'Miscellaneous'),
]


# -- Extension configuration -------------------------------------------------

# ~~ autodoc ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# classのメンバの表示順をソースの順番にする
autodoc_member_order = 'bysource'
# __init__ のドキュメントも生成
autoclass_content = 'both'
# 自動で追加するフラグ
autodoc_default_flags = ['inherited-members']

# ~~ intersphinx ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
intersphinx_mapping = {'requests': ('http://docs.python-requests.org/en/master', None)}


# ~~ API一覧を生成 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PROJECT_NAME = 'pytwitcasting'

# APIs用のモジュール一覧
modules = [
    fileName[17:-3]
    for fileName in sorted(glob.glob(f'../{PROJECT_NAME}/*.py'))
    if fileName not in [
            f'../{PROJECT_NAME}/__init__.py',
            f'../{PROJECT_NAME}/__version__.py',
            f'../{PROJECT_NAME}/auth.py',
            f'../{PROJECT_NAME}/error.py',
            f'../{PROJECT_NAME}/parsers.py',
            f'../{PROJECT_NAME}/utils.py',
    ]
]

methods = dict()

# '_hoge'は省くため
ignore_pattern = re.compile(r'^_.*')

for module in modules:
    with open(f'../{PROJECT_NAME}/{module}.py', 'r') as f:
        methodName = None
        className = None
        for line in f:
            # クラス名
            if line.startswith('class '):
                className = line.split('(')[0][6:]
                # print(f'{PROJECT_NAME}.{module}.{className}')

            # メソッド名
            if line.startswith('    def '):
                methodName = line.split('(')[0][8:]
                if re.search(ignore_pattern, methodName):
                    # '_get_comments' とかは無視する
                    methodName = None
                    continue

            # 呼び出しURL
            if line.startswith('        :calls: `'):
                # 'GET', 'http://example.com' みたいな
                verb, url = line[17:].split(' ')[0:2]
                if url not in methods:
                    methods[url] = dict()
                if verb not in methods[url]:
                    methods[url][verb] = set()

                methods[url][verb].add(f':meth:`{className}.{methodName} <{PROJECT_NAME}.{module}.{className}.{methodName}>`')

            method = None

# api一覧を生成
with open('apis.rst', 'w') as apis:
    apis.write('APIs\n')
    apis.write('====\n')
    apis.write('\n')
    for url, verbs in sorted(methods.items()):
        apis.write(f'* ``{url}``\n')
        apis.write('\n')
        for verb in ['GET', 'PATCH', 'POST', 'PUT', 'DELETE']:
            if verb in verbs:
                apis.write(f'  * {verb}: ' + ' or '.join(sorted(verbs[verb])) + '\n')
                apis.write('\n')
